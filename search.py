import requests
import argparse
import json
import time
import csv
import sys
import os
from datetime import datetime, timedelta

global csvwrite

def getApiKey(): # retrieves API_KEY for NVD
    # api_txt = open('api_key.txt','r')
    # API_KEY = api_txt.read()
    # api_txt.close()
    API_KEY = os.getenv('NVD_API_KEY')
    return API_KEY

def kwSearch(keywords, mTrig=False): #Searching NVD API for keywords
    print('Searching for New/Modified CVEs for ' + str(keywords))
    time = datetime.now().strftime('%Y-%m-%dT%H:%M:%S.%fZ')
    delta = datetime.now() - timedelta(days=7) # Only Modified since last week
    lastweek = delta.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
    url = 'https://services.nvd.nist.gov/rest/json/cves/2.0/'
    headers = {
    "apiKey": getApiKey()
    }
    params = {
    "keywordSearch": keywords,
    "lastModStartDate": lastweek,
    "lastModEndDate": time,
    }
    if mTrig: params.update({"resultsPerPage": "5"}) # If mTrig is True, trigger Mini Mode
        
    r = requests.get(url, headers=headers, params=params)
    try:
        cves = r.json()
        for cve in cves['vulnerabilities']:
            c = cve['cve']
            print(str(c['id']))
            # print(
            # "CVE: " + str(c['id']) + "\n"
            # "Last Modified: " + str(c['lastModified']) + "\n"
            # "Description: " + str(c['descriptions'][0]['value'])
            # )
            if 'cvssMetricV31' in c['metrics']:
                # print("Impact Score V31: " + str(c['metrics']['cvssMetricV31'][0]['impactScore']) + "\n")
                csvwrite.writerow([str(c['id']),str(c['metrics']['cvssMetricV31'][0]['impactScore']),str(c['descriptions'][0]['value']),str(c['lastModified'])])
            elif 'cvssMetricV30' in c['metrics']:
                # print("Impact Score V2: " + str(c['metrics']['cvssMetricV30'][0]['impactScore']) + "\n")
                csvwrite.writerow([str(c['id']),str(c['metrics']['cvssMetricV30'][0]['impactScore']),str(c['descriptions'][0]['value']),str(c['lastModified'])])
            elif 'cvssMetricV2' in c['metrics']:
                # print("Impact Score V2: " + str(c['metrics']['cvssMetricV2'][0]['impactScore']) + "\n")
                csvwrite.writerow([str(c['id']),str(c['metrics']['cvssMetricV2'][0]['impactScore']),str(c['descriptions'][0]['value']),str(c['lastModified'])])
            else:
                # continue
                csvwrite.writerow([str(c['id']),'N/A',str(c['descriptions'][0]['value']),str(c['lastModified'])])
            # print(c)
        # print(cves)
    except:
        print('Error: ', keywords, ' ', r.status_code) # exception for bad API requests

def csvWriter(mTrig=False): # CSV creator
    print('Writing CSV')
    csvfile = open('cve.csv', mode='w', newline='')
    global csvwrite
    csvwrite = csv.writer(csvfile, dialect='excel', delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
    csvwrite.writerow(['CVE','Impact Score','Description','Last Modified'])
    # csvwrite.writerow(['1234','1.2','test description','11-1-11'])

    for k in kwArray:
        if mTrig:
            kwSearch(k, mTrig)
        else:
            kwSearch(k)
            time.sleep(6)
    csvfile.close()
    
def dupeCheck():
    print('Eliminating Duplicates')
    with open('cve.csv','r') as in_f, open('cve_unduped.csv','w') as out_f:
        seen = set()
        for line in in_f:
            if line in seen:
                continue
            seen.add(line)
            out_f.write(line)
    in_f.close()
    out_f.close()
    
def checkSearchDupes(searchTerms):
    print('Checking for Search Term Duplicates...')
    setTerms = set()
    for term in searchTerms:
        if term in setTerms:
            sys.exit('Found Duplicate Term: ' + term)
        else:
            setTerms.add(term)
    print('No duplicate Search Terms found, moving on...')
    
def sendToTeams():
    print('Sending to Teams')
    # f = open('teams_hook.txt','r')
    # url = f.read()
    # f.close()
    url = os.getenv('TEAMS_HOOK')
    headers = {
        'Content-Type': 'application/json'
    }
    payload = {
        'text': 'New Report posted in Repo https://github.com/SecurityTapestry-Queen/nvd-cve-api-search/blob/main/cve_unduped.csv'
    }
    r = requests.post(url, headers=headers, data=json.dumps(payload))
    print(r.text.encode('utf8'))
    # sys.exit('Done!')
    
kwArray = [
    'Microsoft',
    'Windows',
    'Linux',
    'Red Hat',
    'Apple',
    'SAP',
    'IBM',
    'VMware',
    'ESXi',
    'Docker',
    'SUSE',
    'Dell',
    'Intel',
    'AMD',
    'Management',
    'SQL',
    'Nginx',
    'StarWind',
    'Atlassian',
    'Nextcloud',
    'samba',
    'Adobe',
    'Cisco',
    'Juniper',
    'Fortinet',
    'Google',
    'git',
    'GitLab',
    'Apache',
    'macOS',
    'Office365',
    'Azure',
    'Lenovo',
    'HP',
    'Hyper-V',
    'Zoom',
    'NVIDIA',
    'Slack',
    'Freshworks',
    'OpenSSL',
    'WordPress',
    'Node.js',
    'Java',
    'QEMU',
    'Xen',
    'Citrix',
    'MongoDB',
    'Redis',
    'bitcoin',
    'Netgear',
    'Arris',
    'D-Link',
    'Zyxel',
    'Ubiquity',
    'Kibana',
    'Grafana',
    'xterm',
    'PHP',
    'Go',
    'Tenda',
    'SNMP',
    'Proofpoint',
    'jQuery',
    'Python',
    'Ethereum',
    'Jenkins',
    'TensorFlow',
    'IOBit',
    'RDP',
    'HashiCorp',
    'Elasticsearch',
    'Solarwinds',
    'Django',
    'Dolibarr',
    'GIS',
    'Defender',
    'SharePoint',
    'Win32k',
    'Outlook',
    'Word',
    'Excel',
    'Powerpoint',
    'VPN',
    'Hadoop',
    'Airwatch',
    'Oracle',
    'MySQL',
    'Snapdragon',
    'Mattermost',
    'Amazon',
    'Eclipse',
    'STARTTLS',
    'TLS',
    'SSL',
    'EMC',
    'OAuth',
    'Gradle',
    'MSI',
    'VNC',
    'Exchange',
    'Discourse',
    'Airflow',
    'Aruba',
    'ADX',
    'biometric',
    'Zoho',
    'BusyBox',
    '.NET',
    'Visual Studio',
    'JetBrains',
    'Wyse',
    'Darktrace',
    'SentinelOne',
    'Okta',
    'Crowdstrike',
    'Palo Alto',
    'Carbon Black',
    'AWS'
]

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='NVD CVE API Scraper')
    parser.add_argument('-m', '--mini-csv', help='Only checks for a few CVEs per Search Term', action='store_true', dest='Mini', default=False)
    parser.add_argument('-t', '--send-to-teams', help='Sends Link to Teams Channel', action='store_true', dest='SendToTeams', default=False)
    args = parser.parse_args()

    if sys.version_info < (3, 10):
        sys.exit("Please use Python 3.10+")
    
    print('Search Terms Used:')
    print(*kwArray, sep=', ')
    time.sleep(3)

    checkSearchDupes(kwArray)
    time.sleep(3)

    getApiKey()

    if args.Mini:
        print('Mini Mode On')
        csvWriter(True)
    else:
        csvWriter()

    dupeCheck()
    
    if args.SendToTeams: sendToTeams()
    
    print('Done!')